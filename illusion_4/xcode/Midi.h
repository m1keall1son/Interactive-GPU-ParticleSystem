using namespace ci;
using namespace ci::app;
using namespace std;

#include "MidiOut.h"
#include "MidiMessage.h"
#include "MidiConstants.h"
#include "cinder/params/Params.h"
#include "cinder/Utilities.h"
#include "cinder/CinderMath.h"

class MidiBirth  {
public:
	void setup(float far, float close);
	void update(int avgDepth, bool showGUI);
	void draw();
    
    midi::MidiOut mMidiOut;
    params::InterfaceGl mParams;
    
    int mPort, mPrePort;
    string mPortName;
    int mChannel;
    bool mPlay, mSpeedUp;
    float mInput;
	int mNote, mVelocity,mNoteBirth;
    float mScaled, mPreviousScaled;
    int mMetro, mDupleTriple;
    float mFar, mClose;
    float mTempo;
    float mSection1, mSection2, mSection3;
    long long mMillis;
    int mCounter, mNoteCounter;
    float mPreviousGetElaspedSeconds;
    string mNotes;
    string mBirthNotes[8];
    bool mshowGUI;
    
    
    //------------------------
    void initiateVariables()
    {
        mParams = params::InterfaceGl( "Music Settings & Info", Vec2i( 500, 150 ) );
        
        
        //        mParams.addParam( "Count", &mNoteCounter );
        //        mParams.addParam( "Tempo (millis)", &mTempo );
        mParams.addParam( "MIDI Port Name", &mPortName,mPortName,true);
        mParams.addParam( "To change port, change port number here", &mPort);
        mParams.addSeparator();
        mParams.addParam( "Number sent from kinect", &mInput, "min=0 max=255 step=1" );
        mParams.addSeparator();
        mParams.addParam( "Music threshold, set this to the number sent from kinect", &mFar);
        mParams.addParam( "Bottom range of thres., 0 is a good number to set it to ", &mClose);
        mVelocity=0;
        mScaled=mPreviousScaled=0;
        mMidiOut.getPortList();
        mPort=0;
        mMidiOut.openPort(mPort);
        mPortName=mMidiOut.getName();
        mPort=mMidiOut.getPort();
        mPrePort=mPort;
        mInput=0;
        mPlay=false;
        mSection1=600;
        mSection2=280;
        mSection3=300;
        mDupleTriple=2;
        mTempo=mSection1;
        mMillis=getElapsedSeconds()*1000;
        mPreviousGetElaspedSeconds=getElapsedSeconds();
        mCounter=-1;
        mNoteCounter=0;
        mSpeedUp=false;
        mFar=77;
        mClose=0;
    }
    
    
    //------------------------
    void playFirewallNotes()
    {
        //scale input
        mVelocity=lmap(mInput, mFar, mClose, 10.0f, 127.0f);
        mScaled=lmap(mInput, mFar, mClose, 0.0f, 90.0f);
        mScaled = ( mScaled < 0.0f ) ? 0.0f : ( ( mScaled > 90.0f ) ? 90.0f : mScaled ); //clamp wasn't working
        
        
        //triplets
        if (mNoteCounter>118&&mNoteCounter<577) {
            mDupleTriple=3;
        } else {
            mDupleTriple=2;
        }
        
        //Section 1 tempo
        if (mNoteCounter<=120&&mNoteCounter>0){
            mSpeedUp=false;
            mTempo=mSection1;
            
        }
        
        //Section 2 tempo
        if (mNoteCounter>120&&mNoteCounter<577) {
            mSpeedUp=false;
            mTempo=mSection2;
        }
        
        //Section 3 tempo
        if (mNoteCounter>=577&&mNoteCounter<=649){
            mSpeedUp=false;
            mTempo=mSection1;
            mDupleTriple=2;
        }
        
        //Section 4 tempo
        if (mNoteCounter>649&&mNoteCounter<952){
            mSpeedUp=true;
            mDupleTriple=2;
        }
        
        //speed up
        if (mSpeedUp && mTempo>301) {
            if (getElapsedSeconds()>mPreviousGetElaspedSeconds) {
                mTempo-=.3;
            }
        }
        mPreviousGetElaspedSeconds=getElapsedSeconds();
        
        //tempo speeds up further when someone presses into spandex
        mMetro=mTempo-(mScaled+mPreviousScaled);
        mPreviousScaled=mScaled;
        
        //start music
        if (mScaled>0) {
            mPlay=true;
        }
        
        
        //acts like a metro from max
        if (fabs(getElapsedSeconds()*1000 - mMillis) >= mMetro) {
            if (mPlay) {
                readNotes(1+mNoteCounter);
                //advance notes
                mNoteCounter=(mNoteCounter+1)%952;
                //make it triplets if we want
                mCounter=(mCounter+1)%mDupleTriple;
                if (mCounter==1) {
                    mPlay=false;
                }
            }
            mMillis += mMetro ;
        }
    }
    
    
    //------------------------
    void readNotes(int note)
    {
        string comma=", ";
        string str=to_string(note)+comma;
        int start=mNotes.find(str)+str.length();
        int end=mNotes.find(";",start);
        int len=end-start;
        string section = mNotes.substr(start,len);
        vector<string> notes=split(section,' ');
        for (size_t i=0;i<notes.size();i++){
            mNote=stoi(notes[i]);
            mMidiOut.sendNoteOn(1,mNote,mVelocity);
        }
    }
    
    
    //------------------------
    void playBirthNotes(int trigger)
    {
        
        
        vector<string> notes=split(mBirthNotes[2],' ');
        
        //scale input
        mVelocity=lmap(mInput, mFar, mClose, 10.0f, 127.0f);
        
        switch (trigger) {
            case 0:
                mMidiOut.sendNoteOn(1,stoi(notes[0]),mVelocity);
                break;
            case 1:
                mMidiOut.sendNoteOn(1,stoi(notes[1]),mVelocity);
                mMidiOut.sendNoteOn(1,stoi(notes[2]),mVelocity);
                break;
            case 2:
                mMidiOut.sendNoteOn(1,stoi(notes[3]),mVelocity);
                break;
            case 3:
                mMidiOut.sendNoteOn(1,stoi(notes[4]),mVelocity);
                mMidiOut.sendNoteOn(1,stoi(notes[5]),mVelocity);
                break;
            case 4:
                mMidiOut.sendNoteOn(1,stoi(notes[6]),mVelocity);
                break;
            case 5:
                mMidiOut.sendNoteOn(1,stoi(notes[7]),mVelocity);
                mMidiOut.sendNoteOn(1,stoi(notes[8]),mVelocity);
                break;
            case 6:
                mMidiOut.sendNoteOn(1,stoi(notes[9]),mVelocity);
                break;
            case 7:
                mMidiOut.sendNoteOn(1,stoi(notes[10]),mVelocity);
                break;
                
            default:
                break;
        }
        
    }
    
    
    //------------------------
    void checkMidiPort()
    {
        if (mPort!=mPrePort) {
            mMidiOut.closePort();
            mMidiOut.openPort(mPort);
            mPortName=mMidiOut.getName();
            mPrePort=mPort;
        }
    }
    
    
    //------------------------
    void initiateFirewallNotes(){
        mNotes="1, 57 45 38; 2, 57; 3, 57; 4, 57; 5, 57 41 48; 6, 57; 7, 57; 8, 57; 9, 57 45 38; 10, 57; 11, 57; 12, 57; 13, 57 41 48; 14, 57; 15, 57; 16, 57; 17, 57 49 42; 18, 57; 19, 57; 20, 57; 21, 57 41 48; 22, 57; 23, 57; 24, 57; 25, 42 57 49; 26, 57; 27, 57; 28, 57; 29, 57 41 48; 30, 57; 31, 57; 32, 57; 33, 45 52 60; 34, 60; 35, 45 52 60; 36, 60; 37, 64 55 48; 38, 64; 39, 64 55 48; 40, 64; 41, 46 39 55; 42, 55; 43, 55 46 39; 44, 55; 45, 58 43 50; 46, 58; 47, 58 43 50; 48, 58; 49, 57 45 38; 50, 57; 51, 57; 52, 57; 53, 57 41 48; 54, 57; 55, 57; 56, 57; 57, 57 45 38; 58, 57; 59, 57; 60, 57; 61, 57 48 41; 62, 57; 63, 57; 64, 57; 65, 57 42 49; 66, 57; 67, 57; 68, 57; 69, 57 41 48; 70, 57; 71, 57; 72, 57; 73, 49 42 57; 74, 57; 75, 57; 76, 57; 77, 57 48 41; 78, 57; 79, 57; 80, 57; 81, 60 52 45; 82, 60; 83, 60; 84, 45 60 52; 85, 64 55 48; 86, 64; 87, 55 64 48; 88, 64; 89, 55 46 39; 90, 55; 91, 46 39 55; 92, 55; 93, 58 43 50; 94, 58; 95, 58 43 50; 96, 58; 97, 62 46 53; 98, 62; 99, 46 62 53; 100, 62; 101, 53 45 38; 102, 53; 103, 38 45 53; 104, 53; 105, 46 39 55; 106, 55; 107, 39 46 55; 108, 55; 109, 58 50 43; 110, 58; 111, 58 50 43; 112, 58; 113, 58 49 42; 114, 58; 115, 58; 116, 58; 117, 49 42 58; 118, 58; 119, 58 49 42; 120, 58; 121, 37; 122, 44; 123, 53; 124, 63; 125, 53; 126, 44; 127, 37; 128, 44; 129, 53; 130, 63; 131, 53; 132, 44; 133, 37; 134, 44; 135, 53; 136, 63; 137, 53; 138, 44; 139, 37; 140, 44; 141, 53; 142, 63; 143, 53; 144, 44; 145, 37; 146, 44; 147, 52; 148, 63; 149, 52; 150, 44; 151, 37; 152, 44; 153, 52; 154, 63; 155, 52; 156, 44; 157, 37; 158, 44; 159, 52; 160, 61; 161, 52; 162, 44; 163, 37; 164, 44; 165, 52; 166, 61; 167, 52; 168, 44; 169, 37; 170, 44; 171, 53; 172, 63; 173, 53; 174, 44; 175, 37; 176, 44; 177, 53; 178, 63; 179, 53; 180, 44; 181, 37; 182, 44; 183, 53; 184, 63; 185, 53; 186, 44; 187, 37; 188, 44; 189, 53; 190, 63; 191, 53; 192, 44; 193, 37; 194, 45; 195, 52; 196, 63; 197, 52; 198, 45; 199, 37; 200, 45; 201, 52; 202, 63; 203, 52; 204, 45; 205, 37; 206, 45; 207, 52; 208, 61; 209, 52; 210, 45; 211, 37; 212, 45; 213, 52; 214, 61; 215, 52; 216, 45; 217, 44; 218, 52; 219, 59; 220, 64; 221, 59; 222, 52; 223, 44; 224, 52; 225, 59; 226, 64; 227, 59; 228, 52; 229, 44; 230, 52; 231, 59; 232, 66; 233, 59; 234, 52; 235, 44; 236, 52; 237, 59; 238, 66; 239, 59; 240, 52; 241, 43; 242, 51; 243, 58; 244, 67; 245, 58; 246, 51; 247, 43; 248, 51; 249, 58; 250, 67; 251, 58; 252, 51; 253, 43; 254, 51; 255, 58; 256, 69; 257, 58; 258, 51; 259, 43; 260, 51; 261, 58; 262, 69; 263, 58; 264, 51; 265, 42; 266, 49; 267, 61; 268, 70; 269, 61; 270, 49; 271, 42; 272, 49; 273, 61; 274, 70; 275, 61; 276, 49; 277, 42; 278, 49; 279, 61; 280, 72; 281, 61; 282, 49; 283, 42; 284, 49; 285, 61; 286, 72; 287, 61; 288, 49; 289, 41; 290, 50; 291, 62; 292, 72; 293, 62; 294, 50; 295, 41; 296, 50; 297, 62; 298, 72; 299, 62; 300, 50; 301, 41; 302, 50; 303, 62; 304, 74; 305, 62; 306, 50; 307, 41; 308, 50; 309, 62; 310, 70; 311, 62; 312, 50; 313, 43; 314, 50; 315, 62; 316, 72; 317, 62; 318, 50; 319, 43; 320, 50; 321, 62; 322, 72; 323, 62; 324, 50; 325, 43; 326, 50; 327, 62; 328, 74; 329, 62; 330, 50; 331, 43; 332, 50; 333, 62; 334, 70; 335, 62; 336, 50; 337, 37; 338, 45; 339, 61; 340, 69; 341, 61; 342, 45; 343, 37; 344, 45; 345, 61; 346, 69; 347, 61; 348, 45; 349, 37; 350, 45; 351, 61; 352, 71; 353, 61; 354, 45; 355, 37; 356, 45; 357, 61; 358, 73; 359, 61; 360, 45; 361, 42; 362, 49; 363, 57; 364, 69; 365, 57; 366, 49; 367, 42; 368, 49; 369, 57; 370, 69; 371, 57; 372, 49; 373, 42; 374, 49; 375, 57; 376, 69; 377, 57; 378, 49; 379, 42; 380, 49; 381, 57; 382, 69; 383, 57; 384, 49; 385, 41; 386, 48; 387, 57; 388, 69; 389, 57; 390, 48; 391, 41; 392, 48; 393, 57; 394, 69; 395, 57; 396, 48; 397, 41; 398, 48; 399, 57; 400, 69; 401, 57; 402, 48; 403, 41; 404, 48; 405, 57; 406, 69; 407, 57; 408, 48; 409, 42; 410, 49; 411, 57; 412, 69; 413, 57; 414, 49; 415, 42; 416, 49; 417, 57; 418, 69; 419, 57; 420, 49; 421, 42; 422, 49; 423, 59; 424, 71; 425, 59; 426, 49; 427, 42; 428, 49; 429, 59; 430, 71; 431, 59; 432, 49; 433, 41; 434, 48; 435, 59; 436, 71; 437, 59; 438, 48; 439, 41; 440, 48; 441, 59; 442, 71; 443, 59; 444, 48; 445, 41; 446, 48; 447, 60; 448, 72; 449, 60; 450, 48; 451, 41; 452, 48; 453, 60; 454, 72; 455, 60; 456, 48; 457, 45; 458, 52; 459, 60; 460, 72; 461, 60; 462, 52; 463, 45; 464, 52; 465, 60; 466, 72; 467, 60; 468, 52; 469, 45; 470, 52; 471, 62; 472, 74; 473, 62; 474, 52; 475, 45; 476, 52; 477, 62; 478, 74; 479, 62; 480, 52; 481, 43; 482, 52; 483, 62; 484, 74; 485, 62; 486, 52; 487, 43; 488, 52; 489, 62; 490, 74; 491, 62; 492, 52; 493, 43; 494, 52; 495, 64; 496, 76; 497, 64; 498, 52; 499, 43; 500, 52; 501, 64; 502, 76; 503, 64; 504, 52; 505, 45; 506, 52; 507, 60; 508, 72; 509, 60; 510, 52; 511, 45; 512, 52; 513, 60; 514, 72; 515, 60; 516, 52; 517, 45; 518, 52; 519, 59; 520, 71; 521, 59; 522, 52; 523, 45; 524, 52; 525, 57; 526, 69; 527, 57; 528, 52; 529, 41; 530, 48; 531, 57; 532, 69; 533, 57; 534, 48; 535, 41; 536, 48; 537, 57; 538, 69; 539, 57; 540, 48; 541, 41; 542, 48; 543, 57; 544, 69; 545, 57; 546, 48; 547, 41; 548, 48; 549, 57; 550, 69; 551, 57; 552, 48; 553, 36; 554, 43; 555, 55; 556, 64; 557, 55; 558, 43; 559, 36; 560, 43; 561, 55; 562, 64; 563, 55; 564, 43; 565, 36; 566, 43; 567, 55; 568, 62; 569, 55; 570, 43; 571, 36; 572, 43; 573, 55; 574, 60; 575, 55; 576, 43; 577, 60 52 45; 578, 60; 579, 60; 580, 60; 581, 64 55 48; 582, 64; 583, 64; 584, 64; 585, 55 46 39; 586, 55; 587, 55; 588, 55; 589, 58 43 50; 590, 58; 591, 58; 592, 58; 593, 57 49 42; 594, 57; 595, 57; 596, 57; 597, 57; 598, 57; 599, 57 49 42; 600, 57; 601, 57 48 41; 602, 57; 603, 57; 604, 57; 605, 48 59 41; 606, 59; 607, 60 48 41; 608, 60; 609, 57 49 42; 610, 57; 611, 57; 612, 57; 613, 56 49 42; 614, 56; 615, 49 42 54; 616, 54; 617, 45 54 38; 618, 54; 619, 54; 620, 54; 621, 52 45 38; 622, 52; 623, 38 45 50; 624, 50; 625, 40 57 49; 626, 57; 627, 57; 628, 57; 629, 57; 630, 57; 631, 40 57 49; 632, 57; 633, 57 41 50; 634, 57; 635, 57; 636, 57; 637, 57; 638, 57; 639, 59 41 50; 640, 59; 641, 57 49 42; 642, 57; 643, 57; 644, 57; 645, 49 42 57; 646, 57; 647, 56; 648, 54; 649, 50 45 38; 650, 54; 651, 57; 652, 54; 653, 50; 654, 54; 655, 57; 656, 54; 657, 50; 658, 54; 659, 59; 660, 54; 661, 50; 662, 54; 663, 61; 664, 54; 665, 50; 666, 53; 667, 57; 668, 53; 669, 50; 670, 53; 671, 57; 672, 53; 673, 50; 674, 53; 675, 59; 676, 53; 677, 50; 678, 53; 679, 60; 680, 53; 681, 48; 682, 55; 683, 64; 684, 55; 685, 48; 686, 55; 687, 64; 688, 55; 689, 48; 690, 55; 691, 64; 692, 55; 693, 48; 694, 55; 695, 64; 696, 55; 697, 48; 698, 55; 699, 63; 700, 55; 701, 48; 702, 55; 703, 63; 704, 55; 705, 48; 706, 55; 707, 63; 708, 55; 709, 48; 710, 55; 711, 63; 712, 55; 713, 46; 714, 55; 715, 63; 716, 55; 717, 46; 718, 55; 719, 63; 720, 55; 721, 46; 722, 55; 723, 63; 724, 55; 725, 46; 726, 55; 727, 63; 728, 55; 729, 46; 730, 53; 731, 62; 732, 53; 733, 46; 734, 53; 735, 62; 736, 53; 737, 46; 738, 53; 739, 62; 740, 53; 741, 46; 742, 53; 743, 62; 744, 53; 745, 55; 746, 58; 747, 62; 748, 58; 749, 55; 750, 58; 751, 62; 752, 58; 753, 55; 754, 58; 755, 64; 756, 58; 757, 55; 758, 58; 759, 64; 760, 58; 761, 57; 762, 60; 763, 65; 764, 60; 765, 57; 766, 60; 767, 65; 768, 60; 769, 56; 770, 60; 771, 65; 772, 60; 773, 56; 774, 60; 775, 65; 776, 60; 777, 55; 778, 58; 779, 63; 780, 58; 781, 55; 782, 58; 783, 63; 784, 58; 785, 54; 786, 58; 787, 63; 788, 58; 789, 54; 790, 58; 791, 63; 792, 58; 793, 53; 794, 56; 795, 63; 796, 56; 797, 53; 798, 56; 799, 63; 800, 56; 801, 53; 802, 56; 803, 63; 804, 56; 805, 53; 806, 56; 807, 63; 808, 56; 809, 52; 810, 56; 811, 63; 812, 56; 813, 52; 814, 56; 815, 63; 816, 56; 817, 52; 818, 56; 819, 61; 820, 56; 821, 52; 822, 56; 823, 61; 824, 56; 825, 53; 826, 56; 827, 63; 828, 56; 829, 53; 830, 56; 831, 63; 832, 56; 833, 53; 834, 56; 835, 63; 836, 56; 837, 53; 838, 56; 839, 63; 840, 56; 841, 52; 842, 57; 843, 63; 844, 57; 845, 52; 846, 57; 847, 63; 848, 57; 849, 52; 850, 57; 851, 61; 852, 57; 853, 52; 854, 57; 855, 61; 856, 57; 857, 56; 858, 59; 859, 64; 860, 59; 861, 56; 862, 59; 863, 64; 864, 59; 865, 56; 866, 59; 867, 66; 868, 59; 869, 56; 870, 59; 871, 66; 872, 59; 873, 51; 874, 58; 875, 67; 876, 58; 877, 51; 878, 58; 879, 67; 880, 58; 881, 51; 882, 58; 883, 69; 884, 58; 885, 51; 886, 58; 887, 69; 888, 58; 889, 54; 890, 62; 891, 69; 892, 62; 893, 54; 894, 62; 895, 69; 896, 62; 897, 54; 898, 62; 899, 69; 900, 62; 901, 54; 902, 62; 903, 69; 904, 62; 905, 55; 906, 62; 907, 69; 908, 62; 909, 55; 910, 62; 911, 69; 912, 62; 913, 55; 914, 61; 915, 69; 916, 61; 917, 55; 918, 61; 919, 69; 920, 61; 921, 54; 922, 62; 923, 69; 924, 62; 925, 54; 926, 62; 927, 69; 928, 62; 929, 54; 930, 62; 931, 69; 932, 62; 933, 54; 934, 62; 935, 69; 936, 62; 937, 55; 938, 62; 939, 69; 940, 62; 941, 55; 942, 62; 943, 69; 944, 62; 945, 55; 946, 61; 947, 69; 948, 61; 949, 55; 950, 61; 951, 69; 952, 61;";
    }
    
    //------------------------
    void initiateBirthNotes(){
        
        mBirthNotes[0]="31 62 79 38 22 67 58 46 62 55 70";
        mBirthNotes[1]="32 62 79 39 24 68 60 48 63 56 72";
        mBirthNotes[2]="24 75 79 36 39 -1 43 48 60 63 -1";
        mBirthNotes[3]="22 75 79 41 50 68 56 60 62 51 74";
        mBirthNotes[4]="20 75 79 32 39 -1 58 60 62 63 -1";
        mBirthNotes[5]="27 75 79 39 48 68 56 60 63 51 74";
        mBirthNotes[6]="24 75 79 39 51 -1 43 65 58 63 -1";
        mBirthNotes[7]="34 62 79 41 26 70 62 50 65 58 74";
    }
    
};